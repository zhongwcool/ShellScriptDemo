#!/bin/bash
################################################################
# Author 
#       Alex.zhong
# Last Modified Date
#       2016-09-13
# Version
#       3.2.2
#
# Change Log
# 3.2.2
#       1.TH10更新了flex2，开始启用CA.
# 3.2.1
#       1.TH10更新了kernel等模块.
# 3.2.0
#       1.以文件夹形式提供烧写镜像，默认不再执行tar打包.
#       2.TH10修改flex2编译参数.
# 3.1.5
#       1.调整TH10项目的boot文件恢复方法.
#       2.TH10开启Sign支持.
# 3.1.4
#       1.默认打开TH10的flex开关.
# 3.1.3
#       1.开启TH10对flex的编译支持.
#       2.修改日志日期显示错误的Bug.
# 3.1.2
#       1.改进ImageBin的命名.
#       2.修改日志输出被清除的Bug.
# 3.1.1
#       1.调整P9000的打包文件.
# 3.1.0
#       1.优化log输出.
#       2.增加对TH10和P9000的支持.
# 3.0.3
#       1.更新部分字段.
#       2.修改custom build version的信息显示错误.
# 3.0.2
#       1.更新打包文件的信息.
# 3.0.1
#       1.修改非签名项目压缩出错的问题.
# 3.0.0
#       1.增加对fp7 bd7 n8项目编译的支持.
#       2.智能识别默认项目名.
#       3.优化ImageBin命名规则以提升用户体验.
################################################################

# Print basic info of package tool
echo "################################################################"
echo "# Author "
echo "#       Alex.zhong"
echo "# Last Modified Date" 
echo "#       2016-09-12"
echo "# Version "
echo "#       3.2.2"
echo "# Notes "
echo "#       8月10日后更新的TH10代码需要使用版本3.1.5以上的脚本!"
echo "#       9月09日后更新的TH10代码需要使用版本3.2.1以上的脚本!"
echo "################################################################"

#######################################################################
# 
# Feature Option Area
#
#######################################################################

# Declare feature option
PROJECT_DAFAULT="p9ke"
PROJECT_SUPPORT="fp7 bd7 n8 d5 p9ke th10"

PROJECT_PATH=$(cd "$(dirname "$0")"; pwd)
PROJECT_CATEGORY=$(basename `pwd`)
PROJECT_PLATFORM="MT6580"

CORES=`grep -c ^processor /proc/cpuinfo`
JOBS="-j$(($CORES * 2))"

OPTION_SIGN=false
OPTION_UPDATE=false
OPTION_NEW=false
OPTION_RELEASE=false
OPTION_OTA=false
OPTION_PACKAGE=false
OPTION_OPENJDK=false

IS_FLEX_SUPPORT=false
IS_MBR_SUPPORT=false
IS_EBR1_SUPPORT=false
IS_EBR2_SUPPORT=false
IS_TEE1_SUPPORT=false
IS_TEE2_SUPPORT=false
IS_ADDON_SUPPORT=false

IS_EXT_MD1ROM_SUPPORT=false
IS_EXT_MD1DSP_SUPPORT=false
IS_EXT_MD1ARM7_SUPPORT=false
IS_EXT_MD3ROM_SUPPORT=false
IS_EXT_TINYSYS_SUPPORT=false
IS_EXT_TRUSTZONE_SUPPORT=false

CUSTOMIZATION="CIS_Open"
#BUILD_TYPE="user"
#BUILD_TYPE="userdebug"
BUILD_TYPE="eng"
VERSION_NAME="LGX210AT-00-V10c-GLOBAL-COM"

IMAGETAR_OUT="ImageBin_${BUILD_TYPE}_"
#######################################################################
# 
# Function Area
#
#######################################################################
# define funtion
CHECK_ERROR () {
  if [ $1 != 0 ]
  then
    echo "编译出错了，请检查build.log！"
    exit $1
  fi
}

RESTORE_KERNAL () {
  cd out/target
  git reset --hard HEAD
  cd ../../
}

PRINT_STAGE () {
  echo "###################################################################" >&1 | tee -a build.log
  echo "#                                                                 #" >&1 | tee -a build.log
  echo "#   $1"                                                              >&1 | tee -a build.log
  echo "#                                                                 #" >&1 | tee -a build.log
  echo "###################################################################" >&1 | tee -a build.log
}

PRINT () {
  echo "$1"                                                                  >&1 | tee -a build.log
}

COPY_TO_IMAGEBIN () {
  if [ ! -d ${IMAGETAR_OUT} ]; then
    mkdir -p ${IMAGETAR_OUT}
  fi
  cp -rf $1 ${IMAGETAR_OUT}
  #PRINT "拷贝文件：$1"
}
#######################################################################
# 
# Shell Script Parameters Handle Area
#
#######################################################################
# Shell script parameter support
if [ $# -ge 1 ]; then
  for op in $*;
  do
    case ${op} in
      "update") 
	#echo ">>>>update api."
	OPTION_UPDATE=true;;
      "api") 
	#echo ">>>>update api."
	OPTION_UPDATE=true;;
      "new") 
	#echo ">>>>completely full compile."
	OPTION_NEW=true
        OPTION_UPDATE=true;;
      "ota") 
	#echo ">>>>OTA."
        OPTION_OTA=true;;
      "package")
        OPTION_PACKAGE=true;;
      "pkg")
        OPTION_PACKAGE=true;;
      *) 
	PRINT "${op} is not valid parameter!"
	exit 1
    esac
  done
fi

#######################################################################
# 
# Prepare for Compile
#
#######################################################################
for p in ${PROJECT_SUPPORT};
  do
    PROJECT_CATEGORY_T=$(echo ${PROJECT_CATEGORY} | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')
    if [[ ${PROJECT_CATEGORY_T} =~ $p ]]; then
      PROJECT_DAFAULT=$p
      break
    elif [[ ${PROJECT_CATEGORY_T} =~ "p9000" ]]; then
      PROJECT_DAFAULT="p9ke"
      break
    fi
  done

echo -n "1、请输入项目名[默认:${PROJECT_DAFAULT}, 支持: ${PROJECT_SUPPORT}]:"
read PROJECT

if [ -z ${PROJECT} ]; then
  PRINT ">>>未输入项目名！默认: ${PROJECT_DAFAULT}"
  PROJECT=${PROJECT_DAFAULT}
else
  IS_PROJECT_SUPPORT=false

  for p in ${PROJECT_SUPPORT};
  do
    if [ ${PROJECT} == $p ]; then
      PROJECT=$p
      IS_PROJECT_SUPPORT=true
      break
    fi
  done
  
  if [ ${IS_PROJECT_SUPPORT} == "false" ]; then
    PRINT ">>>此脚本不支持编译项目:${PROJECT}，注意项目名大小写敏感！"
    exit 1
  fi
fi

#Setup project build parameters
if [ ${PROJECT} == "p9ke" ]; then
  PROJECT_PLATFORM="MT6797"
  OPTION_SIGN=false
  IS_FLEX_SUPPORT=false
  IS_MBR_SUPPORT=false
  IS_EBR1_SUPPORT=false
  IS_EBR2_SUPPORT=false
  IS_TEE1_SUPPORT=false
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=false

  IS_EXT_MD1ROM_SUPPORT=true
  IS_EXT_MD1DSP_SUPPORT=true
  IS_EXT_MD1ARM7_SUPPORT=true
  IS_EXT_MD3ROM_SUPPORT=true
  IS_EXT_TINYSYS_SUPPORT=true
  IS_EXT_TRUSTZONE_SUPPORT=true
elif [ ${PROJECT} == "th10" ]; then
  PROJECT_PLATFORM="MT8173"
  OPTION_SIGN=false
  IS_FLEX_SUPPORT=true
  IS_MBR_SUPPORT=true
  IS_EBR1_SUPPORT=false
  IS_EBR2_SUPPORT=false
  IS_TEE1_SUPPORT=true
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=false
elif [ ${PROJECT} == "d5" ]; then
  PROJECT_PLATFORM="MT6580"
  OPTION_SIGN=false
  IS_FLEX_SUPPORT=true
  IS_MBR_SUPPORT=false
  IS_EBR1_SUPPORT=false
  IS_EBR2_SUPPORT=false
  IS_TEE1_SUPPORT=false
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=false
elif [ ${PROJECT} == "bd7" ]; then
  PROJECT_PLATFORM="MT8127"
  OPTION_SIGN=true
  IS_FLEX_SUPPORT=false
  IS_MBR_SUPPORT=true
  IS_EBR1_SUPPORT=true
  IS_EBR2_SUPPORT=true
  IS_TEE1_SUPPORT=true
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=true
elif [ ${PROJECT} == "n8" ]; then
  PROJECT_PLATFORM="MT8163"
  OPTION_SIGN=true
  IS_FLEX_SUPPORT=false
  IS_MBR_SUPPORT=false
  IS_EBR1_SUPPORT=false
  IS_EBR2_SUPPORT=false
  IS_TEE1_SUPPORT=true
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=true
elif [ ${PROJECT} == "fp7" ]; then
  PROJECT_PLATFORM="MT8163"
  OPTION_SIGN=true
  IS_FLEX_SUPPORT=false
  IS_MBR_SUPPORT=false
  IS_EBR1_SUPPORT=false
  IS_EBR2_SUPPORT=false
  IS_TEE1_SUPPORT=true
  IS_TEE2_SUPPORT=false
  IS_ADDON_SUPPORT=true
fi

# Record Start Timestamp
MAKECOST=$(date +%s)
echo "开始时间：`date +%Y-%m-%d\ %H:%M:%S`" > build.log

if [ ${PROJECT} == "n8" ] || [ ${PROJECT} == "fp7" ]; then
  PRINT_STAGE "Setup Audio parameters"
  cp -rv vendor/mediatek/proprietary/custom/${PROJECT}_audio/. vendor/mediatek/proprietary/custom/common/cgen/cfgdefault
fi

if [ ${OPTION_OPENJDK} == "false" ]; then
  sed -i 's/^\(requires_openjdk\s*:=\s*\).*$/\1'"false"'/' build/core/main.mk
fi

# Update Build Number
BUILD_NUMBER=`date +%j`
sed -i 's/^\(BUILD_NUMBER\s*:=\s*\).*$/\1'${BUILD_NUMBER}'/' device/mediatek/common/BoardConfig.mk

if [ ${PROJECT} == "n8" ];then
  sed -i 's/^\(NABI_FIRMWARE_VERSION\s*:=\s*\).*$/\1'${BUILD_NUMBER}'/' vendor/fuhu/FuhuConfig-NBV208HMKG-US.mk
elif [ ${PROJECT} == "fp7" ]; then
  sed -i 's/^\(NABI_FIRMWARE_VERSION\s*:=\s*\).*$/\1'${BUILD_NUMBER}'/' vendor/fuhu/FuhuConfig-NBFP07PMKG-US-FP.mk
elif [ ${PROJECT} == "bd7" ]; then
  sed -i 's/^\(NABI_FIRMWARE_VERSION\s*:=\s*\).*$/\1'${BUILD_NUMBER}'/' vendor/fuhu/FuhuConfig.mk
fi

# Update Build Version
VERSION=`date +%Y%m%d.%H%M%S`
BUILD_VERSION="${VERSION}"
sed -i 's/^\(MTK_BUILD_VERNO\s*=\s*\).*$/\1'${BUILD_VERSION}'/' device/arima/${PROJECT}/ProjectConfig.mk

PRINT_STAGE "执行: source build/envsetup.sh"
source build/envsetup.sh

PRINT_STAGE "执行: lunch full_${PROJECT}-${BUILD_TYPE}"
lunch full_${PROJECT}-${BUILD_TYPE}
CHECK_ERROR ${PIPESTATUS[0]}

# make clean must perform before sed
if [ ${OPTION_NEW} == "true" ]; then
  PRINT_STAGE "执行: make clean"
  make clean
  CHECK_ERROR ${PIPESTATUS[0]}
fi

#######################################################################
# 
# Start Compiling Task
#
#######################################################################
# UPDATE-API
if [ ${OPTION_UPDATE} == "true" ]; then
  PRINT_STAGE "执行: make ${JOBS} update-api 2>&1 | tee -a build.log"
  make ${JOBS} update-api 2>&1 | tee -a build.log
  CHECK_ERROR ${PIPESTATUS[0]}
fi

# Some Project need to restore kernel file from git server after update-api action
if [ "d3" = ${PROJECT} ];then
  PRINT_STAGE "Restore Kernel file"
  RESTORE_KERNAL
fi

# Full Compile
if [ ${OPTION_UPDATE} == "true" ]; then
  PRINT_STAGE "执行: make ${JOBS} 2>&1 | tee -a build.log"
  make ${JOBS} 2>&1 | tee -a build.log
  CHECK_ERROR ${PIPESTATUS[0]}
else
  PRINT_STAGE "执行: make ${JOBS} 2>&1 | tee -a build.log"
  make ${JOBS} 2>&1 | tee build.log
  CHECK_ERROR ${PIPESTATUS[0]}
fi

# Make OTA package
if [ ${OPTION_OTA} == "true" ]; then
  PRINT_STAGE "执行: make otapackage"
  make otapackage
  CHECK_ERROR ${PIPESTATUS[0]}
  # move the ota
  mv out/target/product/${PROJECT}/full_${PROJECT}-ota-*.zip ./../
fi

# Generate configuration file for Android Studio
if [ ! -f android.ipr ]; then
  PRINT_STAGE "执行: mmm development/tools/idegen/"
  PRINT ">>>生成Andoid Studio工程的配置文件"
  mmm development/tools/idegen/
  sh ./development/tools/idegen/idegen.sh
fi

# Generate flex image
if [ "true" == ${IS_FLEX_SUPPORT} ]; then
   PRINT_STAGE  "perl vendor/LGE/build/flex/flex.pl ${PROJECT} global_com"
   PRINT ">>>编译flex文件"
   perl vendor/LGE/build/flex/flex.pl ${PROJECT} global_com
fi

# Save snapshot of codebase for release
FILE_SNAPSHOT="`date +%Y%m%d-%H%M`.xml"
PRINT_STAGE "执行: repo manifest -r -o .repo/manifests/${FILE_SNAPSHOT}"
repo manifest -r -o .repo/manifests/${FILE_SNAPSHOT}
#######################################################################
# 
# Package Area
#
#######################################################################
IMAGESET="ImageBin"
IMAGETAR_PREFIX="ImageBin_${PROJECT_CATEGORY}_${BUILD_TYPE}_"

# Remove old image file
PRINT_STAGE "2、删除旧文件"
rm -rvf ./../${IMAGETAR_PREFIX}*.tar.gz
rm -rvf ./../${IMAGETAR_PREFIX}*
PRINT ">>>文件已删除"
PRINT ""

# Signature
PRINT_STAGE "3、项目签名"
if [ ${OPTION_SIGN} == "true" ]; then
  PRINT ">>>此项目需要签名。签名将花费约x分钟，请耐心等待"
  ./vendor/mediatek/proprietary/scripts/sign-image/sign_image.sh
  PRINT ">>>签名已完成"
else
  PRINT ">>>此项目无需签名。"
fi

# Caculate Make Cost
MAKECOST=$((`date +%s`-MAKECOST))
echo ${MAKECOST} > ./MAKECOST

# Show Manifest of Image
PRINT_STAGE "4、文件清单"

TARDATE=`date +%Y%m%d-%H%M`
IMAGETAR_OUT=./../${IMAGETAR_PREFIX}${TARDATE}
IMAGETAR_PREFIX=${IMAGETAR_PREFIX}${TARDATE}
 
  # do not need sign
  FILE_SNAPSHOT=".repo/manifests/${FILE_SNAPSHOT}"
  PRINT ">>>SNAPSHOT  文件： ${FILE_SNAPSHOT}"
  COPY_TO_IMAGEBIN ${FILE_SNAPSHOT}
  FILE_SNAPSHOT=${FILE_SNAPSHOT}
  
  if [ "true" = ${IS_FLEX_SUPPORT} ]; then
    FILE_FLEX="out/target/product/${PROJECT}/flex.img"
    PRINT ">>>FLEX      文件： ${FILE_FLEX} "
    COPY_TO_IMAGEBIN ${FILE_FLEX}
    FILE_FLEX="flex.img"
  fi

  FILE_SCATTER="out/target/product/${PROJECT}/${PROJECT_PLATFORM}_Android_scatter.txt"
  PRINT ">>>SCATTER   文件： ${FILE_SCATTER} "
  COPY_TO_IMAGEBIN ${FILE_SCATTER}
  FILE_SCATTER="${PROJECT_PLATFORM}_Android_scatter.txt"

  if [ ${PROJECT} == "th10" ]; then
  FILE_PRELOADER="out/target/product/${PROJECT}/preloader.bin"
  PRINT ">>>PRELOADER 文件： ${FILE_PRELOADER} "
  COPY_TO_IMAGEBIN ${FILE_PRELOADER}
  FILE_PRELOADER="preloader.bin"
  else
  FILE_PRELOADER="out/target/product/${PROJECT}/preloader_${PROJECT}.bin"
  PRINT ">>>PRELOADER 文件： ${FILE_PRELOADER} "
  COPY_TO_IMAGEBIN ${FILE_PRELOADER}
  FILE_PRELOADER="preloader_${PROJECT}.bin"
  fi
  
  if [ ${OPTION_SIGN} == "true" ]; then
    # need sign
    FILE="boot-sign.img"
    FILE_BOOT="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>BOOT      文件： ${FILE_BOOT} "
    COPY_TO_IMAGEBIN ${FILE_BOOT}
    FILE_BOOT=${FILE}
  
    FILE="cache-sign.img"
    FILE_CACHE="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>CACHE     文件： ${FILE_CACHE} "
    COPY_TO_IMAGEBIN ${FILE_CACHE}
    FILE_CACHE=${FILE}

    FILE="lk-sign.bin"
    FILE_LK="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>LK        文件： ${FILE_LK} "
    COPY_TO_IMAGEBIN ${FILE_LK}
    FILE_LK=${FILE}

    FILE="logo-sign.bin"
    FILE_LOGO="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>LOGO      文件： ${FILE_LOGO} "
    COPY_TO_IMAGEBIN ${FILE_LOGO}
    FILE_LOGO=${FILE}

    FILE="recovery-sign.img"
    FILE_RECOVERY="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>RECOVERY  文件： ${FILE_RECOVERY} "
    COPY_TO_IMAGEBIN ${FILE_RECOVERY}
    FILE_RECOVERY=${FILE}

    FILE="secro-sign.img"
    FILE_SECRO="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>SECRO     文件： ${FILE_SECRO} "
    COPY_TO_IMAGEBIN ${FILE_SECRO}
    FILE_SECRO=${FILE}

    FILE="system-sign.img"
    FILE_SYSTEM="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>SYSTEM    文件： ${FILE_SYSTEM} "
    COPY_TO_IMAGEBIN ${FILE_SYSTEM}
    FILE_SYSTEM=${FILE}

    FILE="userdata-sign.img"
    FILE_USERDATA="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>USERDATA  文件： ${FILE_USERDATA} "
    COPY_TO_IMAGEBIN ${FILE_USERDATA}
    FILE_USERDATA=${FILE}
    
    if [ "true" == ${IS_MBR_SUPPORT} ]; then
    FILE="MBR-sign"
    FILE_MBR="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>MBR       文件： ${FILE_MBR} "
    COPY_TO_IMAGEBIN ${FILE_MBR}
    FILE_MBR=${FILE}
    fi

    if [ "true" == ${IS_EBR1_SUPPORT} ]; then
    FILE="EBR1-sign"
    FILE_EBR1="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>EBR1      文件： ${FILE_EBR1} "
    COPY_TO_IMAGEBIN ${FILE_EBR1}
    FILE_EBR1=${FILE}
    fi

    if [ "true" == ${IS_EBR2_SUPPORT} ]; then
    FILE="EBR2-sign"
    FILE_EBR2="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>EBR2      文件： ${FILE_EBR2} "
    COPY_TO_IMAGEBIN ${FILE_EBR2}
    FILE_EBR2=${FILE}
    fi

    if [ "true" == ${IS_TEE1_SUPPORT} ]; then
    FILE="tz-sign.img"
    FILE_TEE1="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>TEE1      文件： ${FILE_TEE1} "
    COPY_TO_IMAGEBIN ${FILE_TEE1}
    FILE_TEE1=${FILE}
    fi

    if [ "true" == ${IS_TEE2_SUPPORT} ]; then
    FILE="tz-sign.img"
    FILE_TEE2="out/target/product/${PROJECT}/signed_bin/${FILE}"
    PRINT ">>>TEE2      文件： ${FILE_TEE2} "
    COPY_TO_IMAGEBIN ${FILE_TEE2}
    FILE_TEE2=${FILE}
    fi

    if [ "true" == ${IS_ADDON_SUPPORT} ]; then
      FILE="addon.img"
      if [ ${PROJECT} == "bd7" ]; then
        FILE="addon.img"
        FILE_ADDON="out/target/product/${PROJECT}/${FILE}"
      else
        FILE_ADDON="out/target/product/${PROJECT}/${FILE}"
      fi
      PRINT ">>>ADDON     文件： ${FILE_ADDON} "
      COPY_TO_IMAGEBIN ${FILE_ADDON}
      FILE_ADDON=${FILE}
    fi
  else
    FILE="boot.img"
    FILE_BOOT="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>BOOT      文件： ${FILE_BOOT} "
    COPY_TO_IMAGEBIN ${FILE_BOOT}
    FILE_BOOT=${FILE}
  
    FILE="cache.img"
    FILE_CACHE="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>CACHE     文件： ${FILE_CACHE} "
    COPY_TO_IMAGEBIN ${FILE_CACHE}
    FILE_CACHE=${FILE}

    FILE="lk.bin"
    FILE_LK="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>LK        文件： ${FILE_LK} "
    COPY_TO_IMAGEBIN ${FILE_LK}
    FILE_LK=${FILE}

    FILE="logo.bin"
    FILE_LOGO="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>LOGO      文件： ${FILE_LOGO} "
    COPY_TO_IMAGEBIN ${FILE_LOGO}
    FILE_LOGO=${FILE}

    FILE="recovery.img"
    FILE_RECOVERY="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>RECOVERY  文件： ${FILE_RECOVERY} "
    COPY_TO_IMAGEBIN ${FILE_RECOVERY}
    FILE_RECOVERY=${FILE}

    FILE="secro.img"
    FILE_SECRO="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>SECRO     文件： ${FILE_SECRO} "
    COPY_TO_IMAGEBIN ${FILE_SECRO}
    FILE_SECRO=${FILE}

    FILE="system.img"
    FILE_SYSTEM="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>SYSTEM    文件： ${FILE_SYSTEM} "
    COPY_TO_IMAGEBIN ${FILE_SYSTEM}
    FILE_SYSTEM=${FILE}

    FILE="userdata.img"
    FILE_USERDATA="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>USERDATA  文件： ${FILE_USERDATA} "
    COPY_TO_IMAGEBIN ${FILE_USERDATA}
    FILE_USERDATA=${FILE}

    if [ "true" == ${IS_MBR_SUPPORT} ]; then
    FILE="MBR"
    FILE_MBR="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>MBR       文件： ${FILE_MBR} "
    COPY_TO_IMAGEBIN ${FILE_MBR}
    FILE_MBR=${FILE}
    fi

    if [ "true" == ${IS_EBR1_SUPPORT} ]; then
    FILE="EBR1"
    FILE_EBR1="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>EBR1      文件： ${FILE_EBR1} "
    COPY_TO_IMAGEBIN ${FILE_EBR1}
    FILE_EBR1=${FILE}
    fi

    if [ "true" == ${IS_EBR2_SUPPORT} ]; then
    FILE="EBR2"
    FILE_EBR2="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>EBR2      文件： ${FILE_EBR2} "
    COPY_TO_IMAGEBIN ${FILE_EBR2}
    FILE_EBR2=${FILE}
    fi

    if [ "true" == ${IS_TEE1_SUPPORT} ]; then
    FILE="tz.img"
    FILE_TEE1="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>TEE1      文件： ${FILE_TEE1} "
    COPY_TO_IMAGEBIN ${FILE_TEE1}
    FILE_TEE1=${FILE}
    fi

    if [ "true" == ${IS_TEE2_SUPPORT} ]; then
    FILE="tz.img"
    FILE_TEE2="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>TEE2      文件： ${FILE_TEE2} "
    COPY_TO_IMAGEBIN ${FILE_TEE2}
    FILE_TEE2=${FILE}
    fi

    if [ "true" == ${IS_ADDON_SUPPORT} ]; then
    FILE="addon.img"
    FILE_ADDON="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>ADDON     文件： ${FILE_ADDON} "
    COPY_TO_IMAGEBIN ${FILE_ADDON}
    FILE_ADDON=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_MD1ROM_SUPPORT} ]; then
    FILE="md1rom.img"
    FILE_MD1ROM="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>MD1ROM    文件： ${FILE_MD1ROM} "
    COPY_TO_IMAGEBIN ${FILE_MD1ROM}
    FILE_MD1ROM=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_MD1DSP_SUPPORT} ]; then
    FILE="md1dsp.img"
    FILE_MD1DSP="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>MD1DSP    文件： ${FILE_MD1DSP} "
    COPY_TO_IMAGEBIN ${FILE_MD1DSP}
    FILE_MD1DSP=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_MD1ARM7_SUPPORT} ]; then
    FILE="md1arm7.img"
    FILE_MD1ARM7="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>MD1ARM7   文件： ${FILE_MD1ARM7} "
    COPY_TO_IMAGEBIN ${FILE_MD1ARM7}
    FILE_MD1ARM7=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_MD3ROM_SUPPORT} ]; then
    FILE="md3rom.img"
    FILE_MD3ROM="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>MD3ROM    文件： ${FILE_MD3ROM} "
    COPY_TO_IMAGEBIN ${FILE_MD3ROM}
    FILE_MD3ROM=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_TINYSYS_SUPPORT} ]; then
    FILE="tinysys-scp.bin"
    FILE_TINYSYS="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>TINYSYS   文件： ${FILE_TINYSYS} "
    COPY_TO_IMAGEBIN ${FILE_TINYSYS}
    FILE_TINYSYS=${FILE}
    fi
	
    if [ "true" == ${IS_EXT_TRUSTZONE_SUPPORT} ]; then
    FILE="trustzone.bin"
    FILE_TRUSTZONE="out/target/product/${PROJECT}/${FILE}"
    PRINT ">>>TRUSTZONE 文件： ${FILE_TRUSTZONE} "
    COPY_TO_IMAGEBIN ${FILE_TRUSTZONE}
    FILE_TRUSTZONE=${FILE}
    fi
  fi

echo ""

# Image Compressing
if [ "true" == ${OPTION_PACKAGE} ]; then
PRINT_STAGE "5、文件压缩"
echo ">>>开始压缩.."
TARFILE=${IMAGETAR_PREFIX}.tar.gz
cd ${IMAGETAR_OUT}
tar -cvzf ./../${TARFILE} *

# Finish and Output
PRINT_STAGE "6、完成"
PRINT ">>>目标文件: ${TARFILE}"
PRINT ""
PRINT ""
else
# Finish and Output
PRINT_STAGE "5、完成"
PRINT ">>>目标文件: ${IMAGETAR_OUT}"
PRINT ""
PRINT ""
fi

PRINT "结束时间：`date +%Y-%m-%d\ %H:%M:%S`"
